import { Task } from "./public-types";

export function initTasks() {
  const currentDate = new Date();
  const tasks: Task[] = [
    {
      start: new Date(2022, 2, 1),
      end: new Date(2022, 10, 1),
      name: "WF4-DOE",
      id: "wf4-doe",
      progress: 90,
      type: "project",
      hideChildren: false,
    },
    {
      start: new Date(2022, 2, 1),
      end: new Date(2022, 4, 1),
      name: "inhouse prototype",
      id: "prototype",
      progress: 100,
      type: "task",
      project: "wf4-doe",
    },
    {
      start: new Date(2022, 4, 1),
      end: new Date(2022, 8, 1),
      name: "Pfizer UI design",
      id: "pfizer-ui-design",
      progress: 90,
      type: "task",
      project: "wf4-doe",
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 7, 1),
      name: "Pfizer prototype",
      id: "Pfizer prototype",
      progress: currentDate.getMonth(),
      type: "milestone",
      project: "wf4-doe",
      isDisabled: true,
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 8, 1),
      name: "Pfizer data architecture",
      id: "pfizer-data-architecture",
      progress: 70,
      type: "task",
      project: "wf4-doe",
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 9, 1),
      name: "Pfizer backend service",
      id: "pfizer-backend-service",
      progress: 50,
      type: "task",
      project: "wf4-doe",
    },
    {
      start: new Date(2022, 9, 1),
      end: new Date(2022, 9, 15),
      name: "documentation",
      id: "documentation",
      progress: 10,
      type: "task",
      project: "wf4-doe",
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 11, 1),
      name: "Project Telescope",
      id: "project-telescope",
      progress: 20,
      type: "project",
      hideChildren: false,
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 8, 1),
      name: "create stack on AWS",
      id: "create-stack-on-aws",
      progress: 90,
      type: "task",
      project: "project-telescope",
    },
    {
      start: new Date(2022, 8, 1),
      end: new Date(2022, 8, 15),
      name: "create UX",
      id: "create-ux",
      progress: 50,
      type: "task",
      project: "project-telescope",
    },
    {
      start: new Date(2022, 8, 15),
      end: new Date(2022, 9, 1),
      name: "Create stack on Rapid",
      id: "create-stack-on-rapid",
      progress: 10,
      type: "task",
      project: "project-telescope",
    },
    {
      start: new Date(2022, 9, 1),
      end: new Date(2022, 10, 1),
      name: "Deploy Greengrass locally",
      id: "deploy-greengrass-locally",
      progress: 20,
      type: "task",
      project: "project-telescope",
    },
    {
      start: new Date(2022, 8, 1),
      end: new Date(2022, 11, 20),
      name: "ASAP",
      id: "asap",
      progress: 10,
      type: "project",
      hideChildren: false,
    },
    {
      start: new Date(2022, 8, 1),
      end: new Date(2022, 9, 1),
      name: "define ASAP MVP",
      id: "define-asap-mvp",
      progress: 5,
      type: "task",
      project: "asap",
    },
    {
      start: new Date(2022, 10, 1),
      end: new Date(2022, 10, 1),
      name: "deliver prototype",
      id: "deliver prototype",
      progress: currentDate.getMonth(),
      type: "milestone",
      project: "asap",
      isDisabled: true,
    },
    {
      start: new Date(2022, 9, 1),
      end: new Date(2023, 11, 20),
      name: "GA UV automation",
      id: "ga-uv-automation",
      progress: 5,
      type: "project",
      hideChildren: false,
    },
    {
      start: new Date(2022, 9, 1),
      end: new Date(2022, 9, 15),
      name: "evaluate instrument API",
      id: "evaluate-instrument-api",
      progress: 5,
      type: "task",
      project: "ga-uv-automation",
    },
    {
      start: new Date(2022, 9, 15),
      end: new Date(2022, 11, 15),
      name: "prototpye",
      id: "prototype",
      progress: 0,
      type: "task",
      project: "ga-uv-automation",
    },
    {
      start: new Date(2022, 11, 15),
      end: new Date(2023, 4, 15),
      name: "validation",
      id: "validation",
      progress: 0,
      type: "task",
      project: "ga-uv-automation",
    },
    {
      start: new Date(2022, 3, 1),
      end: new Date(2023, 9, 1),
      name: "Smart Laboratory",
      id: "SmartLab",
      progress: 10,
      type: "project",
      hideChildren: false,
    },
    {
      start: new Date(2022, 6, 1),
      end: new Date(2022, 12, 1),
      name: "floor plan",
      id: "floor-plan",
      progress: 100,
      dependencies: ["robot-specs", "lockers", "hood"],
      type: "task",
      project: "SmartLab",
    },
    {
      start: new Date(2022, 6, 1),
      end: new Date(2022, 8, 1),
      name: "robot specs",
      id: "robot-specs",
      progress: 100,
      type: "task",
      project: "SmartLab",
    },
    {
      start: new Date(2022, 7, 1),
      end: new Date(2022, 9, 1),
      name: "pass-through locker specs",
      id: "lockers",
      progress: 100,
      type: "task",
      project: "SmartLab",
    },
    {
      start: new Date(2022, 8, 1),
      end: new Date(2022, 10, 1),
      name: "hood configurations",
      id: "hood",
      type: "task",
      progress: 10,
      dependencies: ["EHS-solvent-tree"],
      project: "SmartLab",
    },
    {
      start: new Date(2022, 9, 1),
      end: new Date(2022, 11, 1),
      name: "EHS review of solvent tree",
      id: "EHS-solvent-tree",
      type: "task",
      progress: 0,
      project: "SmartLab",
    },
    {
      start: new Date(2022, 11, 20),
      end: new Date(2022, 12, 20),
      name: "final lab design",
      id: "final-lab-design",
      progress: currentDate.getMonth(),
      type: "milestone",
      project: "SmartLab",
      isDisabled: true,
    },
  ];
  return tasks;
}

export function getStartEndDateForProject(tasks: Task[], projectId: string) {
  const projectTasks = tasks.filter(t => t.project === projectId);
  let start = projectTasks[0].start;
  let end = projectTasks[0].end;

  for (let i = 0; i < projectTasks.length; i++) {
    const task = projectTasks[i];
    if (start.getTime() > task.start.getTime()) {
      start = task.start;
    }
    if (end.getTime() < task.end.getTime()) {
      end = task.end;
    }
  }
  return [start, end];
}
